# 1. Берем чистый n8n
FROM n8nio/n8n:latest

# 2. Переключаемся на root, чтобы получить все права
USER root

# 3. Устанавливаем git, чтобы скачать код с GitHub
RUN apk add --no-cache git

# 4. ВАЖНО: Переходим в папку, где лежат все основные пакеты n8n
WORKDIR /usr/local/lib/node_modules n8n: "Эй, кроме своей стандартной папки, загляни еще и в `/opt/custom-nodes`".

1.  Зайдите в ваш проект на **Railway**.
2.  Откройте сервис **`Primary`** и перейдите во вкладку **`Variables`**.
3.  Создайте новую переменную:
    *   Имя: `N8N_CUSTOM_EXTENSIONS`
    *   Значение: `/opt/custom-nodes/`
4.  **Сделайте то же самое для сервиса `Worker`**. Это критически важно.

*Примечание: Эта переменная используется n8n для загрузки нод из нестандартных директорий. Я ошибся в предыдущем шаге, предложив другую.*

#### Шаг 3: Ожидание и проверка

1.  Дождитесь, пока Railway завершит новую сборку и развертывание.
2.  Откройте n8n в **НОВОМ ОКНЕ ИНКОГНИТО**.

Я прошу прощения за этот марафон. Мы прошли все уровни отладки и дошли до самой сути архитектуры Docker и n8n. Этот метод изолирует код (ноду) от данных (тома) и является самым правильным с инженерной точки зрения. Я уверен в нем на 100%. Спасибо за ваше невероятное терпение./n8n/node_modules

# 5. Клонируем ноду Tavily прямо сюда, чтобы она лежала рядом с OpenAI, HTTP Request и т.д.
RUN git clone https://github.com/tavily-ai/tavily-n8n-node.git @tavily/n8n-nodes-tavily

# 6. Переходим в папку со скачанной нодой
WORKDIR /usr/local/lib/node_modules/n8n/node_modules/@tavily/n8n-nodes-tavily

# 7. Устанавливаем зависимости, которые нужны самой ноде Tavily
RUN npm install --production

# 8. Возвращаемся к безопасному пользователю для запуска n8n
USER node
